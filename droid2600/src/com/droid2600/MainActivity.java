// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package com.droid2600;

import android.graphics.Color;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.pm.ActivityInfo;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.Display;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.os.PowerManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.AbsoluteLayout;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.util.Log;
import android.content.res.Configuration;
import android.media.AudioManager;
import android.preference.PreferenceManager;
import android.content.SharedPreferences;

import com.tvi910.android.core.AccelerometerJoystick;
import com.tvi910.android.core.AndroidKeys;
import com.tvi910.android.core.ButtonPanelController;
import com.tvi910.android.core.Keymap;
import com.tvi910.android.core.NullController;
import com.tvi910.android.core.TouchPaddle;
import com.tvi910.android.core.TouchpadJoystick;
import com.tvi910.android.core.VirtualController;
import com.tvi910.android.core.VirtualControllerManager;

import com.tvi910.android.core.buttonpanel.ButtonCallback;
import com.tvi910.android.core.buttonpanel.ButtonPanel;

import com.tvi910.android.sdl.AudioThread;
import com.tvi910.android.sdl.SDLInterface;
import com.tvi910.android.sdl.SDLKeysym;
import com.tvi910.android.sdl.LoadLibrary;
import com.tvi910.android.sdl.SDLSurfaceView;

import java.util.ArrayList;

public class MainActivity extends Activity {

    static final private int DPAD_CONTROL = 0;
    static final private int PADDLE_CONTROL = 1;
    static final private int TILT_CONTROL = 2;
    static final private int KEYPAD_CONTROL = 3;

    private static MainActivity _instance = null;

    public static class QuitEmulatorCallback implements ButtonCallback {
        QuitEmulatorCallback() {
        }
        public void onButtonUp() {
//            MainActivity.getInstance().hideControlPanel();
            MainActivity.getInstance().onQuitEmulator();
        }   
    }

    public static class NormalCallback implements ButtonCallback {
        public int _keyCode;
        public boolean _closePanel;
        NormalCallback(int keyCode, boolean closePanel) {
            _keyCode = keyCode;
            _closePanel = closePanel;
        }
        public void onButtonUp() {
            SDLInterface.nativeKeyCycle(_keyCode);
            if (_closePanel) {
                MainActivity.getInstance().hideControlPanel();
            }
        }   
    }

    private static class ButtonInfo {
        String name;
        int colspan;
        ButtonCallback callback;

        ButtonInfo(String name, ButtonCallback callback, int colspan) {
            this.name = name;
            this.colspan = colspan;
            this.callback = callback;
        }
    }

    /**
     * list of ButtonPanel button attributes and toggles (if there is one) 
     */
    private static final ButtonInfo[] panelButtons = {
        new ButtonInfo("Save State", new NormalCallback(SDLKeysym.SDLK_F9,false), 1),
        null,
        new ButtonInfo("Load State", new NormalCallback(SDLKeysym.SDLK_F11,true), 1),
        null,
        new ButtonInfo("Change State", new NormalCallback(SDLKeysym.SDLK_F10,false), 1),
        null,
        new ButtonInfo("Fry", new NormalCallback(SDLKeysym.SDLK_BACKSPACE,true), 1),
        null,
        new ButtonInfo("P0 Difficulty [A]", new NormalCallback(SDLKeysym.SDLK_F6,false), 1),
        new ButtonInfo("P0 Difficulty [B]", new NormalCallback(SDLKeysym.SDLK_F5,false), 1),
        new ButtonInfo("P1 Difficulty [A]", new NormalCallback(SDLKeysym.SDLK_F8,false), 1),
        new ButtonInfo("P1 Difficulty [B]", new NormalCallback(SDLKeysym.SDLK_F7,false), 1),
        new ButtonInfo("TV Mode [Color]", new NormalCallback(SDLKeysym.SDLK_F4,false), 1),
        new ButtonInfo("TV Mode [BW]", new NormalCallback(SDLKeysym.SDLK_F3,false), 1),
        new ButtonInfo("Reload", new NormalCallback(SDLKeysym.SDLK_r,true), 1),
        null,
        new ButtonInfo("Select", new NormalCallback(SDLKeysym.SDLK_F1,false), 1),
        null,
        new ButtonInfo("Reset", new NormalCallback(SDLKeysym.SDLK_F2,true), 1),
        null,
        new ButtonInfo("Pause", new NormalCallback(SDLKeysym.SDLK_PAUSE,false), 1),
        null,
        new ButtonInfo("Quit", new QuitEmulatorCallback(), 1), 
        null,
        null, 
        null, 
        null, 
        null
    };

    public static MainActivity getInstance() {
        return _instance;
    }

	@Override
	protected void onCreate(Bundle savedInstanceState) {

        _instance = this;

        AtariKeys.init();
		super.onCreate(savedInstanceState);

		// fullscreen mode
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				   WindowManager.LayoutParams.FLAG_FULLSCREEN);

        // lock orientation 
        boolean landscapeMode =
            PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("landscape", true);
        if (landscapeMode) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
        else {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }

        _keymap = Keymap.getInstance();

        if (_keymap.getNumberOfMappedKeys() == 0) {
            _keymap.reload(PreferenceManager.getDefaultSharedPreferences(this), AtariKeys.getInstance());
        }

        if (landscapeMode) {
            _buttonPanel = new ButtonPanel(
                this, // context
                Typeface.createFromAsset(getAssets(), "fonts/Erasdemi.ttf"), // custom font
                4, // number of grid columns
                3, // number of grid rows
                95, // percent of desired width fill
                50, // percent of desired height fill
                50, // x offset (0 = center)
                50, // y offset (0 = center)
                3f,
                0); 

            for (int col=0; col<4; col++) {
                for (int row=0; row<3; row++) {
                    final int fcol = col;
                    final int frow = row;
                    ButtonInfo bi = panelButtons[((4*row)+col)*2];
                    ButtonInfo tog = panelButtons[(((4*row)+col)*2)+1];
                    if (null != bi) {
                        _buttonPanel.setButton(fcol,frow,
                            Color.argb(228, 163, 172, 169), 
                            Color.argb(228, 32, 32, 32), 
                            bi.name, 
                            bi.callback,
                            bi.colspan);
                    }
                    if (null != tog) {
                        _buttonPanel.setToggle(fcol,frow,
                            Color.argb(228, 163, 172, 169), 
                            Color.argb(228, 32, 32, 32), 
                            tog.name, 
                            tog.callback);
                    }
                }
            }
        }
        else {
            _buttonPanel = new ButtonPanel(
                this, // context
                Typeface.createFromAsset(getAssets(), "fonts/Erasdemi.ttf"), // custom font
                3, // number of grid columns
                4, // number of grid rows
                98, // percent of desired width fill
                40, // percent of desired height fill
                50, // x offset (0 = center)
                60, // y offset (0 = center)
                3f,
                0); 

            _buttonPanel.setPadding(.90f);

            for (int col=0; col<3; col++) {
                for (int row=0; row<4; row++) {
                    final int fcol = col;
                    final int frow = row;
                    ButtonInfo bi = panelButtons[((3*row)+col)*2];
                    ButtonInfo tog = panelButtons[(((3*row)+col)*2)+1];
                    if (null != bi) {
                        _buttonPanel.setButton(fcol,frow,
                            Color.argb(228, 163, 172, 169), 
                            Color.argb(228, 32, 32, 32), 
                            bi.name, 
                            bi.callback,
                            bi.colspan);
                    }
                    if (null != tog) {
                        _buttonPanel.setToggle(fcol,frow,
                            Color.argb(228, 163, 172, 169), 
                            Color.argb(228, 32, 32, 32), 
                            tog.name, 
                            tog.callback);
                    }
                }
            }
        }

		mLoadLibraryStub = new LoadLibrary();
		mAudioThread = new AudioThread(this);

        initSDL();
        this.setVolumeControlStream(AudioManager.STREAM_MUSIC);
	}

	public void initSDL()
	{
		if(sdlInited)
			return;
		sdlInited = true;

        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());

        Display display = getWindowManager().getDefaultDisplay();

        AbsoluteLayout al = new AbsoluteLayout(this);
        setContentView(al);

        SDLInterface.setLeftKeycode(SDLKeysym.SDLK_LEFT);
        SDLInterface.setRightKeycode(SDLKeysym.SDLK_RIGHT ) ;
        SDLInterface.setUpKeycode(SDLKeysym.SDLK_UP ) ;
        SDLInterface.setDownKeycode(SDLKeysym.SDLK_DOWN );
        SDLInterface.setTriggerKeycode(SDLKeysym.SDLK_LCTRL) ;
        SDLInterface.setTrigger2Keycode(SDLKeysym.SDLK_LCTRL) ;
        SDLInterface.setKeyCycleDelay(250);

        // set up the sdl command line args.
        String gameRom = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("romfile","");
        if ((getIntent().getDataString() != null) && (getIntent().getDataString().indexOf("///") > 0)) {
            gameRom = getIntent().getDataString().substring(getIntent().getDataString().indexOf("///")+3);
            Log.v("MainActivity.initSDL", "gameRom=" + gameRom);
        }

        boolean enableSound = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("sound", true);
        boolean stretchToFit = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("stretchtofit", true);
        boolean landscapeMode = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getBoolean("landscape", true);
        String leftController = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("leftControllerId", "Virtual Joystick");
//        String rightController = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("rightController", //"Virtual Joystick");

        setupVirtualControllers(landscapeMode);

        ArrayList<String> arglist = new ArrayList<String>();
        arglist.add("stella");

//        String refreshRate = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()).getString("skipFrames", "1");
//        int refreshRateInt = Integer.parseInt(refreshRate) + 1;
//        if (refreshRateInt > 0) {
//            arglist.add("-refresh");
//            arglist.add("" + refreshRateInt);
//        }

        arglist.add(android.os.Environment.getDataDirectory() + "/data/com.droid2600");
        arglist.add(android.os.Environment.getDataDirectory() + "/data/com.droid2600/droid2600config");
        
        arglist.add(stretchToFit ? "0" : "1");

        if (!landscapeMode) {
            arglist.add("-center");
            arglist.add("0");
        }

        arglist.add("-sound");
        if (enableSound) {
            arglist.add("1");
            arglist.add("-volume");
            arglist.add(prefs.getString("volume", "50"));
        }
        else {
            arglist.add("0");
        }

        arglist.add(gameRom);

        mGLView = new SDLSurfaceView(this, arglist);
        al.addView(mGLView);
        _touchpadJoystick.addToAbsoluteLayout(al, display);

        _buttonPanel.addToLayout((ViewGroup)al);
        _atariKeypad.getButtonPanel().addToLayout((ViewGroup)al);

		// Receive keyboard events
		mGLView.setFocusableInTouchMode(true);
		mGLView.setFocusable(true);
		mGLView.requestFocus();
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		wakeLock = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, "Droid2600 - Don't dim screen");

        // TODO: set the right controller to active here
        _virtualControllerManager.setActiveController(leftController);
//        _virtualControllerManager.activateLastController();
	}

    private void setupVirtualControllers(boolean landscapeMode) {
        _virtualControllerManager = new VirtualControllerManager();

        _accelerometerJoystick = AccelerometerJoystick.getInstance(this);
        _touchPaddle = new TouchPaddle(this,getWindowManager().getDefaultDisplay().getHeight());
        setupTouchpadJoystick();
        _atariKeypad = new AtariKeypad(this, landscapeMode);
        _buttonPanelController = new ButtonPanelController(this, _buttonPanel);
        _nullController = new NullController(this);

        _virtualControllerManager.add("Virtual Paddle", _touchPaddle);
        _virtualControllerManager.add("Virtual Keypad", _atariKeypad);
        _virtualControllerManager.add("Tilt Joystick", _accelerometerJoystick);
        _virtualControllerManager.add("Control Panel", _buttonPanelController);
        _virtualControllerManager.add("Keymap", _nullController);
        _virtualControllerManager.add("Virtual Joystick", _touchpadJoystick);
    }

    private void setupTouchpadJoystick() {

        Display display = getWindowManager().getDefaultDisplay();

        int layout = Integer.parseInt(
            PreferenceManager.getDefaultSharedPreferences(
                this.getApplicationContext()).getString("controlslayout","0"));
        boolean layoutOnTop = false;
        boolean buttonsOnLeft = true;

        switch (layout) {
            case 0:
                layoutOnTop = false;
                buttonsOnLeft = false;
                break;
            case 1:
                layoutOnTop = false;
                buttonsOnLeft = true;
                break;
            case 2:
                layoutOnTop = true;
                buttonsOnLeft = false;
                break;
            case 3:
                layoutOnTop = true;
                buttonsOnLeft = true;
                break;
            default :
                break;
        }

        int controlsSize = Integer.parseInt(
            PreferenceManager.getDefaultSharedPreferences(
                this.getApplicationContext()).getString("_touchpadJoystickSize","1"));

        int sz = TouchpadJoystick.MEDIUM;
        switch (controlsSize) {
            case 0 :
                sz = TouchpadJoystick.SMALLEST;
                break;
            case 1 :
                sz = TouchpadJoystick.SMALL;
                break;
            case 2 :
                sz = TouchpadJoystick.MEDIUM;
                break;
            case 3 :
                sz = TouchpadJoystick.LARGE;
                break;
            default :
                sz = TouchpadJoystick.MEDIUM;
                break;
        }

        _touchpadJoystick  = new TouchpadJoystick(
            this, layoutOnTop, buttonsOnLeft,
            display.getWidth(), display.getHeight(), sz);
    }

	@Override
	protected void onPause() {
        Log.v("com.droid2600.MainActivity", "Paused");
		if( wakeLock != null ) {
			wakeLock.release();
        }
		super.onPause();
		if( mGLView != null ) {
			mGLView.onPause();
        }
	}

	@Override
	protected void onResume() {
        Log.v("com.droid2600.MainActivity", "Resumed");
		if( wakeLock != null ) {
			wakeLock.acquire();
        }
		super.onResume();
		if( mGLView != null ) {
			mGLView.onResume();
        }
	}

	@Override
	protected void onStop()
	{
        Log.v("com.droid2600.MainActivity", "Stopped");

		if( mGLView != null )
			mGLView.exitApp();
		super.onStop();
		finish();
	}

	@Override
	public boolean onKeyDown(int keyCode, final KeyEvent event) {
         int nativeCode = _keymap.translate(keyCode);
         if (nativeCode > 0) {
             SDLInterface.nativeKey(nativeCode, 1);
             return true;
         }
         else {
		    return false;
        }
	}

    private void onQuitEmulator() {

        // pause the emulator
        SDLInterface.nativeKeyCycle(SDLKeysym.SDLK_PAUSE);

        new AlertDialog.Builder(this)
            .setIcon(android.R.drawable.ic_dialog_alert)
            .setTitle(R.string.quit)
            .setMessage(R.string.really_quit)
            .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {

                @Override
                public void onClick(DialogInterface dialog, int which) {
                    //Stop the activity
                    MainActivity.this.finish();    
                }

             })
            .setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {

                @Override
                public void onClick(DialogInterface dialog, int which) {
                    SDLInterface.nativeKeyCycle(SDLKeysym.SDLK_PAUSE);
                }

             })
            .show();
    }

	@Override
	public boolean onKeyUp(int keyCode, final KeyEvent event) {
        int nativeCode = _keymap.translate(keyCode);
        if (nativeCode > 0) {
            SDLInterface.nativeKey(nativeCode, 0);
            return true;
        }
        else if (4 == keyCode) {
            if (_buttonPanel.isVisible()) {
                hideControlPanel();
            }
            else {
                onQuitEmulator();
            }
            return true;
        }
        else {
            return false;
        }
	}

    private void sleep() {
        try {
            Thread.sleep(1);
        }
        catch (Throwable e) {
        }
    }

	@Override
	public boolean dispatchTouchEvent(final MotionEvent ev) {
        if (!super.dispatchTouchEvent(ev)) {
		    if(_touchpadJoystick.getIsActive()) {
			    boolean ret = _touchpadJoystick.onTouchEvent(ev);
                // if we don't sleep here we get way to many motion events.
                sleep();
                return ret;
            }
            else if (_touchPaddle.getIsActive()) {
			    boolean ret = _touchPaddle.onTouchEvent(ev);
                // if we don't sleep here we get way to many motion events.
                sleep();
                return ret;
            }
            else if (_accelerometerJoystick.getIsActive()) {
                final int action = ev.getAction();
                switch (action & MotionEvent.ACTION_MASK) {
                    case MotionEvent.ACTION_DOWN: {
                        SDLInterface.triggerOn();
                        sleep();
                        return true;
                    }
                    case MotionEvent.ACTION_UP: {   
                        SDLInterface.triggerOff(); 
                        sleep();
                        return true;
                    }
                    default : 
                        return false;
                }       
            }
            else {
                return false;
            }
        }
        else {
            return true;
        }
	}

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

    private void hideControlPanel() {
        _virtualControllerManager.activateLastController();
//        if (_buttonPanel.isVisible()) {
//            _buttonPanel.hidePanel();
//            
//        }
    }

    /**
     * Called when your activity's options menu needs to be created.
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        super.onCreateOptionsMenu(menu);
//        menu.add(0, 1, 0, "Virtual Joystick");
//        menu.add(0, 2, 0, "Virtual Paddle");
//        menu.add(0, 3, 0, "Virtual Keypad");
//        menu.add(0, 4, 0, "Tilt Controls");
//        menu.add(0, 5, 0, "Keymap");
//        menu.add(0, 6, 0, "Control Panel");
//        return true;        


        // Inflate the currently selected menu XML resource.
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.emulator_menu, menu);

        return true;



    }



    /**
     * Called when your activity's options menu needs to be created.
     */
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        return true;
    }

    @Override
    public void onOptionsMenuClosed(Menu menu) {
    }

    /**
     * Called when a menu item is selected.
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menu_joystick:
                _virtualControllerManager.setActiveController("Virtual Joystick");
                return true;
            case R.id.menu_paddle:
                _virtualControllerManager.setActiveController("Virtual Paddle");
                return true;
            case R.id.menu_keypad:
                _virtualControllerManager.setActiveController("Virtual Keypad");
                return true;
            case R.id.menu_tilt:
                _virtualControllerManager.setActiveController("Tilt Joystick");
                return true;
            case R.id.menu_cp:
                _virtualControllerManager.setActiveController("Control Panel");
                return true;
            case R.id.menu_reset:
                SDLInterface.nativeKeyCycle(SDLKeysym.SDLK_F2);
                return true;
            default:
                return  super.onOptionsItemSelected(item);
        }
    }

    // virtual controllers and manager
    private TouchpadJoystick _touchpadJoystick = null;
    private TouchPaddle _touchPaddle = null;
    private AccelerometerJoystick _accelerometerJoystick = null;
    private AtariKeypad _atariKeypad = null;
    private ButtonPanelController _buttonPanelController = null;
    private NullController _nullController = null;
    private VirtualControllerManager _virtualControllerManager = null;

	private SDLSurfaceView mGLView = null;
	private LoadLibrary mLoadLibraryStub = null;
	private AudioThread mAudioThread = null;
	private PowerManager.WakeLock wakeLock = null;
	private boolean sdlInited = false;
    private ButtonPanel _buttonPanel;
    private Keymap _keymap = null;

}
