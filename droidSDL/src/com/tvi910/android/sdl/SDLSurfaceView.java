// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package com.tvi910.android.sdl;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.view.Window;
import android.view.WindowManager;

import android.widget.TextView;
import java.lang.Thread;
import java.util.concurrent.locks.ReentrantLock;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;

import com.tvi910.android.core.AccelerometerJoystick;
import com.tvi910.android.core.Keymap;

import android.util.Log;

import java.util.List;

public class SDLSurfaceView extends GLSurfaceView_SDL {

    // TODO: do not hard code this.
    private static final boolean _needDepthBuffer = false;

    /**
     * @param sdlMainArgs a list of arguments to pass to the main sdl method
     */
	public SDLSurfaceView(Activity context, List<String> sdlMainArgs) {
		super(context);
		mParent = context;
		setEGLConfigChooser(_needDepthBuffer);
		accelerometer = AccelerometerJoystick.getInstance(context);

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
        if (prefs.getBoolean("accelerometer", false)) {
            accelerometer.register();
        }

		mRenderer = new DemoRenderer(context, sdlMainArgs);
		setRenderer(mRenderer);

//        _keymap = Keymap.getInstance();
	}

	 public void exitApp() {
		 mRenderer.exitApp();
		 accelerometer.stop();
		 accelerometer = null;
	 };

//	@Override
//	public boolean onKeyDown(int keyCode, final KeyEvent event) {
//		 return onKey( keyCode, 1 );
//	 }

//	@Override
//	public boolean onKeyUp(int keyCode, final KeyEvent event) {
//         return onKey( keyCode, 0 );
//	 }

//    public boolean onKey(int keyCode, int down) {
//        // if the key isn't mapped, then don't send it to the SDL layer.
//         int nativeCode = _keymap.translate(keyCode);
//         if (nativeCode > 0) {
//             SDLInterface.nativeKey(nativeCode, down);
//             return true;
//         }
//         else {
//             return false;
//         }
//    }

    DemoRenderer mRenderer;
    Activity mParent;
    AccelerometerJoystick accelerometer = null;
//    private Keymap _keymap = null;
}


